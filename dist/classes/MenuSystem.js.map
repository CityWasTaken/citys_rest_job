{"version":3,"file":"MenuSystem.js","sourceRoot":"","sources":["../../src/classes/MenuSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer from 'inquirer';\nimport 'console.table';\n\nimport DB from './DB.js';\n\nclass MenuSystem {\n  static started = false;\n\n  static async showMainMenu() {\n    if (!this.started) {\n      const message = '-------- Welcome to the Employee Tracker! ---------';\n      const line = '*-'.repeat(message.length / 2) + '*';\n\n      console.log(`\\n${line}\\n${message}\\n${line}\\n`);\n      this.started = true;\n    }\n\n    const {choice} = await inquirer.prompt({\n      name: 'choice',\n      message: 'Please choose an option',\n      type: 'list',\n      choices: [\n        {\n          name: 'View All Employees',\n          value: this.showEmployees\n        },\n        {\n          name: 'Add Employee',\n          value: this.showAddEmployeeMenu\n        },\n        {\n          name: 'Update Employee Role',\n          value: this.showUpdateEmployeeRoleMenu\n        },\n        {\n          name: 'View All Roles',\n          value: this.showRoles\n        },\n        {\n          name: 'Add Role',\n          value: this.showAddRoleMenu\n        },\n        {\n          name: 'View All Departments',\n          value: this.showDepartments\n        },\n        {\n          name: 'Add Department',\n          value: this.showAddDepartmentMenu\n        },\n        {\n          name: 'Quit',\n          value: 0\n        }\n      ]\n    });\n\n    if (!choice) {\n      console.log('\\n----- Thanks for using the Employee Tracker! ------\\n');\n\n      process.exit();\n    }\n\n    await choice();\n\n    this.showMainMenu();\n  }\n\n  static async showEmployees() {\n    const employees = await DB.getEmployees();\n    const addedDepartments: any = [];\n    const prepared = employees.reduce((o, emp, i) => {\n      if (!addedDepartments.includes(emp.department) && i) {\n        console.log(i);\n        o.push({\n          department: '\\n',\n          employee_id: '',\n          full_name: '',\n          title: '',\n          salary: '',\n          manager: ''\n        });\n        addedDepartments.push(emp.department);\n      }\n\n      o.push(emp);\n\n      return o;\n    }, [])\n\n    console.log('\\n');\n    console.table(prepared);\n  }\n\n  static async showAddEmployeeMenu() {\n    const { first_name, last_name } = await inquirer.prompt([\n      {\n        name: 'first_name',\n        message: 'Enter employee\\'s first name',\n        type: 'input'\n      },\n      {\n        name: 'last_name',\n        message: 'Enter employee\\'s last name',\n        type: 'input'\n      }\n    ]);\n    const departments = await DB.getDepartments();\n    const {department_id} = await inquirer.prompt({\n      name: 'department_id',\n      message: 'Please select the employee\\'s department',\n      type: 'list',\n      choices: departments.map(dep => ({\n        name: dep.name,\n        value: dep.id\n      }))\n    });\n    const roles = await DB.getRolesByDepartment(department_id);\n\n    if (!roles.length) {\n      console.log('\\n No roles have been added for this department. Please add a role before adding an employee.\\n');\n      return MenuSystem.showAddRoleMenu();\n    }\n\n    const {role_id} = await inquirer.prompt({\n      name: 'role_id',\n      message: 'Please select the employee\\'s role',\n      type: 'list',\n      choices: roles.map(r => ({\n        name: r.title,\n        value: r.id\n      }))\n    });\n\n    const employees = await DB.getEmployeesByDepartment(department_id);\n    const {manager_id} = await inquirer.prompt({\n      name: 'manager_id',\n      message: 'Please select the employee\\'s manager',\n      type: 'list',\n      choices: [{\n        name: 'NO MANAGER',\n        value: null\n      }, ...employees.map(e => ({\n        name: e.employee_name,\n        value: e.id\n      }))]\n    });\n\n    await DB.addEmployee({\n      first_name,\n      last_name,\n      role_id,\n      manager_id\n    });\n\n    console.log('Employee added successfully!\\n');\n  }\n\n  static async showUpdateEmployeeRoleMenu() {\n    const employees = await DB.getEmployees();\n    const {employee_id} = await inquirer.prompt({\n      name: 'employee_id',\n      message: 'Please select the employee to update',\n      type: 'list',\n      choices: employees.map(e => ({\n        name: e.full_name,\n        value: e.id\n      }))\n    });\n    const departments = await DB.getDepartments();\n    const { department_id } = await inquirer.prompt({\n      name: 'department_id',\n      message: 'Please select the department',\n      type: 'list',\n      choices: departments.map(d => ({\n        name: d.name,\n        value: d.id\n      }))\n    });\n    const roles = await DB.getRolesByDepartment(department_id);\n\n    if (!roles.length) {\n      console.log('\\nNo roles have been added for that department. Please create at least one role first\\n');\n      return MenuSystem.showAddRoleMenu();\n    }\n\n    const {role_id} = await inquirer.prompt({\n      name: 'role_id',\n      message: 'Please select the employee\\'s new role',\n      type: 'list',\n      choices: roles.map(r => ({\n        name: r.title,\n        value: r.id\n      }))\n    });\n\n    await DB.updateEmployeeRole(employee_id, role_id);\n\n    console.log('Employee role updated successfully!\\n');\n  }\n\n  static async showRoles() {\n    const roles = await DB.getRoles();\n\n    console.log('\\n');\n    console.table(roles);\n  }\n\n  static async showAddRoleMenu(): Promise<any> {\n    const departments = await DB.getDepartments();\n    const {department_id} = await inquirer.prompt({\n      name: 'department_id',\n      message: 'Please select the department you would like to add a role for',\n      type: 'list',\n      choices: departments.map(d => ({\n        name: d.name,\n        value: d.id\n      }))\n    });\n    const {\n      title,\n      salary\n    } = await inquirer.prompt([\n      {\n        name: 'title',\n        message: 'Enter the new role title',\n        type: 'input'\n      },\n      {\n        name: 'salary',\n        message: 'Enter the new role salary',\n        type: 'input'\n      }\n    ]);\n    \n    const added = await DB.addRole({\n      title,\n      salary,\n      department_id\n    });\n\n    if (!added) {\n      console.log('\\nThat role already exists. Please try again.\\n');\n      return MenuSystem.showAddRoleMenu();\n    }\n\n    console.log('New role added successfully!\\n');\n  }\n\n  static async showDepartments() {\n    const departments = await DB.getDepartments();\n\n    console.log('\\n');\n    console.table(departments);\n  }\n\n  static async showAddDepartmentMenu(): Promise<any> {\n    const {\n      name\n    } = await inquirer.prompt([\n      {\n        name: 'name',\n        message: 'Enter the new department name',\n        type: 'input'\n      }\n    ]);\n\n    const added = await DB.addDepartment(name);\n\n    if (!added) {\n      console.log('\\nThat department already exists. Please try again.\\n');\n      return MenuSystem.showAddDepartmentMenu();\n    }\n\n    console.log('New department added successfully!\\n');\n  }\n}\n\nexport default MenuSystem;"]}